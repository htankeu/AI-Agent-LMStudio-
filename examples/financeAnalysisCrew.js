require('dotenv').config({ path: require('path').join(__dirname, '..', '.env') });
const { Tool, Agent, Task } = require('../core');
const { lmStudioTool } = require('../tools');
const { companyOverviewTool, appendAnalysisTool, incomeStatementTool, balanceSheetTool, earningTool, getAnalysisFileTool, newsSentimentTool } = require('../financeTools');

// --- GLOBAL CONFIG ---
const TICKER = 'IBM'; // APPLE, IBM, MSFT, META, AMZN, TSLA
const VERBOSE = false; 

// --- AGENTS ---
const fetcher = new Agent('FinanceFetcher', [companyOverviewTool, incomeStatementTool, balanceSheetTool, earningTool, getAnalysisFileTool, newsSentimentTool]);
const analyst = new Agent('FinanceAnalyst', [lmStudioTool], 
    "Tu es un expert en analyse financi√®re. Sur la base des donn√©es d'une soci√©t√© cot√©e, donne un conseil d'investissement (BUY, HOLD ou SELL) et explique ta d√©cision de fa√ßon courte avec bulletpoints.");
const writer = new Agent('AnalysisWriter', [appendAnalysisTool]);

// --- TASKS ---
const tasks = [
    new Task(TICKER, 'companyOverview'), // 1. R√©cup√©rer donn√©es financi√®res
    new Task(
        "Analyse ces donn√©es financi√®res et propose un conseil d'investissement (BUY, HOLD ou SELL) pour un investisseur long terme. Justifie ta r√©ponse.",
        'lmStudio'
    ), // 2. Analyse IA
    new Task(
        { ticker: TICKER, analysisType: 'Overview Analysis', content: '' },
        'appendAnalysis'
    ), // 3. √âcriture dans le fichier markdown

    // 4. R√©cup√©rer compte de r√©sultat (income statement)
    new Task(TICKER, 'incomeStatement'),
    // 5. Analyse IA sur le compte de r√©sultat
    new Task(
        "Analyse ces donn√©es du compte de r√©sultat (3 derniers trimestres) et propose un conseil d'investissement (BUY, HOLD ou SELL) pour un investisseur long terme. Justifie ta r√©ponse de fa√ßon courte avec bulletpoints.",
        'lmStudio'
    ),
    // 6. √âcriture de l'analyse du compte de r√©sultat dans le fichier markdown
    new Task(
        { ticker: TICKER, analysisType: 'Income Statement Analysis', content: '' },
        'appendAnalysis'
    ),

    // 7. R√©cup√©rer bilan (balance sheet)
    new Task(TICKER, 'balanceSheet'),
    // 8. Analyse IA sur le bilan
    new Task(
        "Analyse ces donn√©es du bilan (3 derniers trimestres) et propose un conseil d'investissement (BUY, HOLD ou SELL) pour un investisseur long terme. Justifie ta r√©ponse de fa√ßon courte avec bulletpoints.",
        'lmStudio'
    ),
    // 9. √âcriture de l'analyse du bilan dans le fichier markdown
    new Task(
        { ticker: TICKER, analysisType: 'Balance Sheet Analysis', content: '' },
        'appendAnalysis'
    ),

    // 10. R√©cup√©rer r√©sultats (earnings)
    new Task(TICKER, 'earning'),
    // 11. Analyse IA sur les r√©sultats
    new Task(
        "Analyse ces donn√©es de r√©sultats (earnings, 3 derniers trimestres) et propose un conseil d'investissement (BUY, HOLD ou SELL) pour un investisseur long terme. Justifie ta r√©ponse de fa√ßon courte avec bulletpoints.",
        'lmStudio'
    ),
    // 12. √âcriture de l'analyse des r√©sultats dans le fichier markdown
    new Task(
        { ticker: TICKER, analysisType: 'Earnings Analysis', content: '' },
        'appendAnalysis'
    ),

    // 13. R√©cup√©rer actualit√©s et sentiment
    new Task(TICKER, 'newsSentiment'),
    // 14. Analyse IA sur les actualit√©s
    new Task(
        "Analyse ces actualit√©s r√©centes et leur sentiment. D√©termine l'impact potentiel sur l'investissement et propose un conseil (BUY, HOLD ou SELL) bas√© sur le sentiment des actualit√©s. Justifie ta r√©ponse de fa√ßon courte avec bulletpoints.",
        'lmStudio'
    ),
    // 15. √âcriture de l'analyse des actualit√©s dans le fichier markdown
    new Task(
        { ticker: TICKER, analysisType: 'News Sentiment Analysis', content: '' },
        'appendAnalysis'
    ),

    // 16. R√©cup√©rer le contenu final du fichier d'analyse
    new Task(TICKER, 'getAnalysisFile'),
    // 17. Demander √† l'IA un conseil d'investissement final bas√© sur toutes les analyses pr√©c√©dentes
    new Task(
        "Voici l'ensemble des analyses pr√©c√©dentes (overview, income statement, balance sheet, earnings, news sentiment). Sur cette base, donne un conseil d'investissement final (BUY, HOLD ou SELL) pour un investisseur long terme et explique ta d√©cision de fa√ßon concise.",
        'lmStudio'
    ),
    // 18. √âcriture de l'analyse finale dans le fichier markdown
    new Task(
        { ticker: TICKER, analysisType: 'Final Investment Advice', content: '' },
        'appendAnalysis'
    )
];

// --- CREW ---
class Crew {
    constructor(agents = []) {
        this.agents = agents;
    }
    async run(tasks = []) {
        const results = [];
        let lastResult = null;
        for (let i = 0; i < tasks.length; i++) {
            const agent = this.agents[i % this.agents.length];
            const toolName = tasks[i].toolName;
            const percent = Math.round(((i + 1) / tasks.length) * 100);
            console.log(`üîÑ √âtape ${i + 1}/${tasks.length} (${percent}%) | üë§ Agent: ${agent.name} | üõ†Ô∏è Tool: ${toolName}`);

            // Injecte r√©sultat pr√©c√©dent pour l'analyse IA
            if (toolName === 'lmStudio' && i > 0 && lastResult) {
                tasks[i].input = `${tasks[i].input}\n\n${typeof lastResult === 'string' ? lastResult : JSON.stringify(lastResult, null, 2)}`;
            }
            // Injecte le r√©sultat de l'analyse dans la t√¢che d'√©criture
            if (toolName === 'appendAnalysis' && lastResult) {
                tasks[i].input.content = lastResult;
            }
            lastResult = await agent.perform(tasks[i]);
            if (VERBOSE) {
                console.log(`‚úÖ R√©sultat √©tape ${i + 1}:`, lastResult);
            }
            results.push(lastResult);
        }
        console.log(`üéâ Analyse termin√©e ! R√©sultat IA :\n`, results[results.length - 2]);
        return results;
    }
}

// --- Example usage ---
const crew = new Crew([fetcher, analyst, writer]);
crew.run(tasks).then(console.log);
